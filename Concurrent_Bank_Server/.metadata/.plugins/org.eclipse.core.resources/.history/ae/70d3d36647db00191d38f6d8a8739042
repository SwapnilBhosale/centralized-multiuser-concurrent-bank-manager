/*
 * ServerSock.cpp
 *
 *  Created on: Sep 16, 2019
 *      Author: lilbase
 */

#include "ServerSock.h"

ServerSock::ServerSock() {
	this->port = DEFAULT_SERVER_PORT;
	sockfd = 0;

}

ServerSock::ServerSock(unsigned int port) {
	this->port = port;
	sockfd = 0;
	mlock = PTHREAD_MUTEX_INITIALIZER;
}

ServerSock::~ServerSock() {
}

void ServerSock::init() {
	int sock;
	struct sockaddr_in srv_addr;
	sock = socket(PF_INET, SOCK_STREAM, 0);
	if (sock <= 0)
		perror( "error : socket()");

	int enable = 1;
	if (setsockopt(sock,
			SOL_SOCKET, SO_REUSEADDR,
			&enable, sizeof(int)) < 0)
		perror("setsockopt(SO_REUSEADDR)");

	//bzero(&srv_addr, sizeof(srv_addr));
	srv_addr.sin_family = PF_INET;
	srv_addr.sin_port = htons(port);
	srv_addr.sin_addr.s_addr = INADDR_ANY;

	/* We bind to a port and turn this socket into a listening
	 * socket.
	 * */
	if (bind(sock, (const struct sockaddr *)&srv_addr, sizeof(srv_addr)) < 0)
		perror("Error:bind()");

	if (listen(sock, 10) < 0){
		perror("error: listen()");
		exit(1);
	}
	std::cout<<"server listening on port "<<this->port;
	this->sockfd = sock;
}

void ServerSock::enter_server_loop() {
	struct sockaddr_in client_addr;
	socklen_t client_addr_len = sizeof(client_addr);

	while (1)
	{
		pthread_mutex_lock(&mlock);
		int client_socket = accept(
				this->sockfd,
				(struct sockaddr *)&client_addr,
				&client_addr_len);
		std::cout<<"after accepting the client connection, thread id:"<<pthread_self()<<std::endl;
		if (client_socket < 0)
			perror("accept error");
		pthread_mutex_unlock(&mlock);

		handle_client(client_socket);
	}
}

int get_line(int sock, char *buf, int size) {
    ssize_t n;

    //while ((i < size - 1) && (c != '\n'))
    //{
        n = recv(sock, &buf, size, 0);
    //}
    std::cout<<"actually read bytes : "<<n<<std::endl;
    return (n);
}

void handle_client(int client_socket) {
	char *line_buffer = (char *)malloc(sizeof(1024));
	std::cout<<"inside handle client for socket id:"<<client_socket<<std::endl;
	/*
	 * Setup a timeout on recv() on the client socket
	 * */
	struct timeval tv;
	tv.tv_sec = 15;
	tv.tv_usec = 0;
	setsockopt(client_socket, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);


	//while (1)
	//{
		unsigned long len = get_line(client_socket, line_buffer, sizeof(line_buffer));
		int len1 = strlen(line_buffer);
		std::cout<<"using strlen : "<<len1<<std::endl;
		//if(line_buffer[len-1] != '\0' || line_buffer[len] != '\0')
			//line_buffer[len] = '\0';

		//line_buffer[len] = '\0';
		/*
		 The first line has the HTTP method/verb. It's the only
		 thing we care about. We read the rest of the lines and
		 throw them away.
		 */
		//if (method_line == 1)
		//{
		//	if (len == 0)
		//		return;

		//	strcpy(method_buffer, line_buffer);
		//}
		//else
		//{
		//	if (len == 0)
		//		break;
		//}
	//}
	std::cout<<"got data of length : "<<len<<std::endl;
	if(len > 0){
		std::cout<<"received data of bytes "<<len<<std::endl;
		std::cout<<"received Data : "<<std::string(line_buffer)<<std::endl;
	}
	int i;
	std::cout<<"printing array"<<std::endl;
	for(i=0; line_buffer[i] != '\0';i++){
		std::cout<<line_buffer[i];
	}
	bzero(line_buffer, sizeof(line_buffer));
	//handle_http_method(method_buffer, client_socket);
	close(client_socket);
	//close(redis_socket_fd);
	return;
}

