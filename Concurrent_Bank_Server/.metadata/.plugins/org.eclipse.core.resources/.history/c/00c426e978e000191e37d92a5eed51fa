/*
 * Customer.h
 *
 *  Created on: Sep 20, 2019
 *      Author: lilbase
 */

#ifndef SERVER_CUSTOMER_H_
#define SERVER_CUSTOMER_H_
#include <math.h>
#include <pthread.h>
#include "../../include/spdlog/fmt/ostr.h"
#include "constants.h"

class Customer {
	friend class CustomerBuilder;
private:
	std::string name;
	int account_number;
	long double balance;
	pthread_mutex_t mutex_balance = PTHREAD_MUTEX_INITIALIZER;
public:
	int getAccountNumber() const
	{
		return account_number;
	}

	void setAccountNumber(int accountNumber)
	{
		account_number = accountNumber;
	}

	long double getBalance() const
	{
		return balance;
	}

	void setBalance(double balance)
	{
		this->balance = balance;
	}

	const std::string& getName() const
	{
		return name;
	}

	void setName(const std::string& name)
	{
		this->name = name;
	}

	void add_money(double money) {
		this -> balance = this -> balance + money;
	}

	void reduce_money(double money) {
		this -> balance = this ->balance - money;
	}

	bool can_withdraw(double money) {
		return this -> balance >= money;
	}

	double calculate_intrest() {
		double updated_amount = roundf(this -> balance  + ( (this ->balance * INTREST_RATE) / 100 )) / 100;
		return updated_amount;
	}
	template<typename OStream>
	    friend OStream &operator<<(OStream &os, const Customer &c)
	    {
	        return os << "[ " << c.getAccountNumber() << ", "<<c.getName()<<", "<<c.getBalance()<<" ]";
	    }

	std::string get_withdrawl_success_msg(double amount){
		std::string msg;
		msg = "Successfully withdrawl: $"+std::to_string(amount)+", for customer: "+std::to_string(this->account_number);
		return msg;
	}

	std::string get_withdraw_fail_msg(double amount) {
		std::stringstream stream;
				stream << std::fixed << std::setprecision(2) << c.getBalance();
				msg = "Withdrawal fail for customer: "+acc_no+". Tried to withdraw $"+amt+
						" but available balance is: $"+stream.str();
	}
};

std::ostream& operator<< (std::ostream &out, Customer const& data) {
	std::stringstream stream;
		stream << std::fixed << std::setprecision(2) << data.getBalance();
	out<<"[ ";
	out << data.getAccountNumber() << ", ";
	out << data.getName() << ", ";
	out << stream.str();
	out<<" ]";
	return out;
}

class CustomerBuilder {
private:
	Customer c;

public:
	CustomerBuilder(){
		c.account_number = 0;
		c.balance = 0;
		c.name = "";
	}

	CustomerBuilder set_name(std::string name) {
		c.setName(name);
		return *this;
	}

	CustomerBuilder set_account_number(int num){
		c.setAccountNumber(num);
		return *this;
	}

	CustomerBuilder set_balance(long int bal){
		c.setBalance(bal);
		return *this;
	}

	Customer build() {
		return c;
	}
};


#endif /* SERVER_CUSTOMER_H_ */
