/*
 * Transaction.h
 *
 *  Created on: Sep 20, 2019
 *      Author: lilbase
 */

#ifndef SERVER_TRANSACTION_H_
#define SERVER_TRANSACTION_H_


class Transaction {
	friend class TransactionBuilder;
private:
	std::string timestamp;
	int account_number;
	char type;
	long int amount;
public:
	int getAccountNumber() const
	{
		return account_number;
	}

	void setAccountNumber(int accountNumber)
	{
		account_number = accountNumber;
	}

	long int getAmount() const
	{
		return amount;
	}

	void setAmount(long int amount)
	{
		this->amount = amount;
	}


	char getType() const
	{
		return type;
	}

	void setType(char type)
	{
		this->type = type;
	}

	const std::string& getTimestamp() const
	{
		return timestamp;
	}

	void setTimestamp(const std::string& timestamp)
	{
		this->timestamp = timestamp;
	}

	std::string generate_transaction_payload(){
		std::string s;
		std::string payload;
		payload.append(this->timestamp);
		payload.append(" ");
		payload.append(std::to_string(this->account_number));
		payload.append(" ");
		payload.append(s(this -> type));
		payload.append(" ");
		payload.append(std::to_string(this->amount));
		payload.append("\n");
		return payload;
	}
};

class TransactionBuilder{
public:
	Transaction t;
	TransactionBuilder(){
		t.account_number = 0;
		t.amount = 0;
		t.timestamp = "";
		t.type = ' ';
	}

	TransactionBuilder set_timestamp(std::string name){
		t.setTimestamp(name);
		return *this;
	}

	TransactionBuilder set_transaction_type(char type) {
		t.setType(type);
		return *this;
	}

	TransactionBuilder set_amount(long int amount) {
		t.setAmount(amount);
		return *this;
	}

	TransactionBuilder set_account_number(int account_number) {
		t.setAccountNumber(account_number);
		return *this;
	}

	Transaction  build(){
		return t;
	}

};



#endif /* SERVER_TRANSACTION_H_ */
