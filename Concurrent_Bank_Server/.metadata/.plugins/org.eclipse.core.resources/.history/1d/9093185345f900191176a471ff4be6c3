/*
 * clock_berkeley.h
 *
 *  Created on: Oct 26, 2019
 *      Author: Swapnil Bhosale
 */

#include <iostream>
#include <stdlib.h>
#include <mpi.h>
#include <string.h>
#include <math.h>
#include "./include/spdlog/spdlog.h"
#include "./include/spdlog/sinks/stdout_color_sinks.h"
#include <vector>
#include <pthread.h>
#include <time.h>

#ifndef CLOCK_BERKELEY_H_
#define CLOCK_BERKELEY_H_
using namespace std;

typedef struct clientTimes {
	int processId;
	int clientTime;
	int diff;
	int offset;
}clientData;

int main(int argc, char *argv[])
{
	vector<spdlog::sink_ptr> sinks;
	sinks.push_back(make_shared<spdlog::sinks::stdout_color_sink_mt>());
	auto combined_logger = std::make_shared<spdlog::logger>("Server", begin(sinks), end(sinks));
	//set log level
	combined_logger -> set_level(spdlog::level::info);

	//set logging pattern
	combined_logger -> set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Process - %P] [%l] %v");
	spdlog::register_logger(combined_logger);

	int rank, i, size, coordinator, lastLine;
	char line[500][5], timeString[5];
	int min, dMin, cMin, diffMin, pMin[500], clientTime, iFlag[500], sumIFlags, temp1;
	int avgTime, adjMin, temp, coo_time;

	MPI_Status status;

	MPI_Init(&argc, &argv); // Initializing MPI
	MPI_Comm_rank(MPI_COMM_WORLD, &rank); // to know the rank of each process
	MPI_Comm_size(MPI_COMM_WORLD, &size); // to know the total number of processes


	srand(time(NULL));
	coordinator = rand() % size;
	clientData *data[size - 1];

	for (int i=0;i<size;i++){
		data[i] =(clientData *) malloc(sizeof(struct clientData));
		data[i] -> processId = i;
	}

	if(rank == coordinator) // coordinator process
	{
		coo_time = rand() % 100;
		data[coordinator] -> clientTime = coo_time;
		data[coordinator] -> diff = 0;
		combined_logger->info("Coordinator process is sending time {}",coo_time);
		for(int i=0; i<size; i++)
		{
			if (i == coordinator)
				continue;
			MPI_Send(coo_time, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
		}

		for(int i=0; i<size-1; i++){
			MPI_Recv(&clientTime,  1,  MPI_INT,  MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
			data[status.MPI_SOURCE] -> clientTime = clientTime;
			data[status.MPI_SOURCE] -> diff = clientTime - coo_time;
			combined_logger->info("Cordinator {} has received time {} from client {}",coordinator,clientTime, status.MPI_SOURCE);
		}

		avgTime = 0;
		int sumOfTime = 0;
		for(int i=0;i<size;i++){
			sumOfTime += data[i] -> diff;
		}
		avgTime = sumOfTime / size; // average value
		combined_logger->info("Time differential average is {}",avgTime);
		data[coordinator] -> offset = avgTime - data[coordinator] ->  diff;// adjust coordinator time value
		data[coordinator] -> clientTime = coo_time + data[coordinator] -> offset;
		combined_logger -> info ("coordinator {} set his time to {}",coordinator, data[coordinator] -> clientTime);
		for(i=0; i<size; i++)
			if(i != coordinator)
			{
				adjMin = avgTime - data[i] -> diff; // adjust time to be adjusted for each process
				combined_logger->info("Coordinator process is sending the clock adjustment value of {} to process {}",adjMin,i);
				MPI_Send(&adjMin, 1, MPI_INT, i, 1, MPI_COMM_WORLD); // send time to be adjusted to respective processes
			}
	}
	else
	{
		MPI_Recv(&coo_, 1, MPI_FLOAT, MPI_ANY_SOURCE, 1, MPI_COMM_WORLD, &status); // receive time to be adjusted from coordinator
		MPI_Barrier(MPI_COMM_WORLD);
		combined_logger->info("Process {} has received time {}",rank,timeString);
		time[0] = ((timeString[0]-'0')*10) + (timeString[1]-'0'); // hours
		time[1] = ((timeString[3]-'0')*10) + (timeString[4]-'0'); // minutes
		cMin = (time[0]*60) + time[1]; // convert received coordinator string into minutes integer
		diffMin = min - cMin; // c=calculate difference in time with coordinator time
		combined_logger->info("Process {} is sending time differential value of {} to process {}",rank,diffMin,coo);
		MPI_Send(&diffMin, 1, MPI_INT, coo, 0, MPI_COMM_WORLD); // send time difference to coordinator
		MPI_Recv(&adjMin, 1, MPI_FLOAT, MPI_ANY_SOURCE, 1, MPI_COMM_WORLD, &status); // receive time to be adjusted from coordinator
		combined_logger->info("Process {} has received the clock adjustment value of {}",rank,adjMin);
		min = min + adjMin; // adjust the time
	}

	// converting time in minutes to hours and minutes of every process
	temp = min;
	temp = temp/60;
	time[0] = temp;
	temp = (temp - time[0])*60;
	time[1] = round(temp);
	if(time[1] == 60)
	{
		time[1] = 0;
		time[0]++;
	}
	if(time[0] == 24)
		time[0] = 0;

	//converting hours to string
	temp = time[0];
	temp = temp/10;
	temp1 = temp;
	timeString[0] = temp1 + '0';
	temp = (temp - temp1)*10;
	temp1 = temp;
	timeString[1] = temp + '0';

	timeString[2] = ':';

	//converting minutes to string
	temp = time[1];
	temp = temp/10;
	temp1 = temp;
	timeString[3] = temp1 + '0';
	temp = (temp - temp1)*10;
	temp1 = temp;
	timeString[4] = temp + '0';
	combined_logger->info("Adjusted local time at process {} is {}",rank,timeString); // displaying final time

	MPI_Finalize();
	return 1;
}

#endif /* CLOCK_BERKELEY_H_ */
