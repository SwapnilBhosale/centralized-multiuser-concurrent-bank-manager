/*
 * Server.h
 *
 *  Created on: Sep 16, 2019
 *      Author: lilbase
 */

#ifndef SERVER_H_
#define SERVER_H_
#include <iostream>
#include <unordered_map>
#include <list>
#include <pthread.h>
#include <fstream>
#include <vector>
#include <sstream>
#include <iterator>
#include "ServerSock.h"
#include "Transaction.h"
#include "Customer.h"

typedef void * (*THREADFUNCPTR)(void *);
#define THREADS_COUNT 10


template <size_t N>
void splitString(std::string (&arr)[N], std::string str)
{
	int n = 0;
	std::istringstream iss(str);
	for (auto it = std::istream_iterator<std::string>(iss); it != std::istream_iterator<std::string>() && n < N; ++it, ++n)
		arr[n] = *it;
}

class BankServer {
public:
	BankServer();
	virtual ~BankServer();
	void init();

	void static print_stats(int signal_number);
	void create_thread(int index, ServerSock *serverSock);
	void perform_action(char *arr);

private:
	ServerSock *serverSock;
	pthread_t threads[THREADS_COUNT];
	std::unordered_map<int, Customer> customer_map;
	std::unordered_map< int, std::vector< Transaction > > transaction_map;

	void initialize_static_data();
};

#endif /* SERVER_H_ */
