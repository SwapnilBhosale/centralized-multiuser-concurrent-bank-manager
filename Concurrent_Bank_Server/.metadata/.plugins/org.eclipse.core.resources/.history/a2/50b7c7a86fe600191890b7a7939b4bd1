/*
 * client.cpp
 *
 *  Created on: Sep 21, 2019
 *      Author: lilbase
 */


#include "Client.h"

void Client::create_client_Service(long int concur) {
	for(int i=0;i<concur;i++){
		int res = pthread_create(&client_service_thread[i], NULL, &Client::client_service_invoke_helper, this);
		if(res  != 0){
			perror("error");
			this -> _logger -> info("error in creating thread {}",i);
		}
	}
}

std::string Client::do_transaction(Transaction t){
	//_logger -> info("started transaction {}", //++Client::count);
	char * buf;
	struct sockaddr_in serv_addr;
	int sock;
	if ((sock = socket(PF_INET, SOCK_STREAM, 0)) < 0)
	{
		perror("\n Socket creation error \n");
	}
	serv_addr.sin_family = PF_INET;
	serv_addr.sin_port = htons(this->port);
	// Convert IPv4 and IPv6 addresses from text to binary form
	if(inet_pton(PF_INET, this->host.c_str(), &serv_addr.sin_addr)<=0)
	{
		perror("\nInvalid address/ Address not supported \n");
	}

	if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
	{
		perror("\nConnection Failed \n");
	}
	std::string payload = t.generate_transaction_payload();
	buf = strcpy(new char[payload.length() + 1], payload.c_str());
	send(sock , buf , strlen(buf) , 0 );
	//_logger->info("Sent from client : {}",buf);
	char recv_buf[1024];
	bzero(recv_buf,1024);
	int n = read(sock, &recv_buf, 1024);
	recv_buf[n] = '\0';
	//s_logger -> info("received data from server: {}",recv_buf);
	close(sock);
	return buf;
}

void * Client::handle_client_service(){
		std::ifstream file;
		file.open(this->file);
		std::string line;
		if(file.is_open()) {
			while(getline(file, line)){
				//_logger -> info("read line {}",line);
				std::string arr[4];
				splitString(arr, line);
				int int_acc_no = std::stoi(arr[1]);
				TransactionBuilder b;
				Transaction trans = b.set_account_number(int_acc_no)
															.set_timestamp(arr[0])
															.set_transaction_type(arr[2][0])
															.set_amount(std::stol(arr[3]))
															.build();
				do_transaction(trans);
			}
			count++;
			//_logger -> info("Done transaction {}",count++);
			thread_status[++count1] = 1;
			//if(count == 5)
				//pthread_exit(0);
			//sleep(CLIENT_SERVICE_SCHEDULE);
		}
		file.close();
}

static void usage(const char *progname)
{
    fprintf(stderr, "Usage: %s [options] [http"
        "://]hostname[:port]/path\n", progname);
/* 80 column ruler:  ********************************************************************************
 */
    fprintf(stderr, "Options are:\n");
    fprintf(stderr, "    -n requests     Number of requests to perform.Default is 20000\n");
    fprintf(stderr, "    -c concurrency  Number of multiple requests to make. Default is 30\n");
    fprintf(stderr, "    -h host  		 Host to connect to default is localhost\n");
    fprintf(stderr, "    -p port  		 Port to connect to default is 8080\n");
    fprintf(stderr, "    -f file address Transaction file address default is './src/transaction.txt'\n");
    exit(EINVAL);
}

int main(int argc, char **argv) {
	extern char *optarg;
	char c;
	int concurrency = CONCURRENCY;
	int n = REQUESTS;
	int p = DEFAULT_SERVER_PORT;
	std::string host(HOST);
	std::string file(FILE);


	while ((c = getopt (argc, argv, ":n:c:h:p:f")) != -1) {
		switch(c){
		case 'n':
			checkArgs(optarg)
			n = atoi(optarg);
			if(n<=0)
				usage(argv[0]);
			break;
		case 'c':
			concurrency = atoi(optarg);
			if(concurrency <= 0 || concurrency > THREAD_MAX)
				usage(argv[0]);
			break;
		case 'h':
			host = optarg;
			if(host.length() == 0)
				usage(argv[0]);
			break;
		case 'p':
			p = atoi(optarg);
			if(p <= 0)
				usage(argv[0]);
			break;
		case 'f':
			file = optarg;
			if(file.length() == 0)
				usage(argv[0]);
			break;
		case '?':
			usage(argv[1]);
			break;
		}
	}
	std::cout<<"n: "<<n<<" c: "<<concurrency<<" h: "<<host<<" p: "<<p<<" f:"<<file<<std::endl;
	std::vector<spdlog::sink_ptr> sinks;
	sinks.push_back(std::make_shared<spdlog::sinks::stdout_color_sink_mt>());
	sinks.push_back(std::make_shared<spdlog::sinks::rotating_file_sink_mt>("./logs/client.txt",1024 * 1024 * 5, 10, true));
	auto combined_logger = std::make_shared<spdlog::logger>("Server", begin(sinks), end(sinks));
	combined_logger -> set_level(spdlog::level::info);
	combined_logger -> set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Thread - %t] [%l] %v");
	spdlog::register_logger(combined_logger);
	long int request_count = n;
	Client client(host, file, concurrency, p);
	timestamp_t start_time = get_timestamp();
	while (true){

		combined_logger -> info("********** Starting thread again {}",concurrency);
		client.create_client_Service(concurrency);
		combined_logger -> info("********** after Starting thread");
		while (true){
			//combined_logger -> info("in while loop");

			bool can_stop = true;
			for(int j=0;j<concurrency;j++){
				if(!client.thread_status[j]){
					can_stop = false;
				}
			}
			if(can_stop){
				memset(&client.thread_status, 0, THREAD_MAX);
				count1 = -1;
				//client.thread_status = {0};
				combined_logger -> info("concurrency {} all stopped",concurrency);
				break;
			}

		}
		request_count -= concurrency;
		int mod = request_count % concurrency;
		if( !mod==0 && request_count < concurrency){
			concurrency = mod;
		}
		combined_logger -> info("********** Request remainins : {}",request_count);
		if(request_count == 0)
			break;


	}
	timestamp_t end_time = get_timestamp();
	double time_taken = (end_time - start_time) / 1000000.0L;
	double request_per_sec = count/time_taken;
	double time_per_req = CONCURRENCY * time_taken * 1000 / count;
	double time_per_req_conc = time_taken * 1000 / count;
	combined_logger -> info("total requests/s: {}",request_per_sec);
	combined_logger -> info("total time/request: {}",time_per_req);
	combined_logger -> info("total time/request(mean, across all concurrent requests): {}",time_per_req_conc);

	//  pause();*/

}


